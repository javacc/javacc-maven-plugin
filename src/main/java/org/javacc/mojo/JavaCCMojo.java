/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.javacc.mojo;

import java.io.File;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;

/**
 * Parses a JavaCC grammar file (<code>*.jj</code>) and transforms it to Java source files.<br>
 * Detailed information about the JavaCC options can be found on the <a
 * href="https://github.com/javacc/javacc-8/">JavaCC website</a>.
 *
 * @goal javacc
 * @phase generate-sources
 * @since 2.0
 * @version 3.8: updated for JavaCC-8+ & JTB 5+; added dependent jar timestamp checking, additional
 *     classpath entry
 */
public class JavaCCMojo extends AbstractJavaCCMojo {

  /**
   * Package into which the generated classes will be put.<br>
   * Note that this will also be used to create the directory structure where sources will be
   * generated.<br>
   * Defaults to the package name specified in a grammar file. A JavaCC option.
   *
   * @parameter property="packageName"
   * @deprecated As of version 2.4 because the plugin extracts the package name from each grammar
   *     file.
   */
  @Deprecated private String packageName;

  /**
   * The directory where the JavaCC grammar files (<code>*.jj</code>) are located.<br>
   * It will be recursively scanned for input files to pass to JavaCC.<br>
   * The parameters <code>includes</code> and <code>excludes</code> can be used to select a subset
   * of the files.<br>
   * Default value is <code>${basedir}/src/main/javacc</code>. A plugin parameter.
   *
   * @parameter property="sourceDirectory" default-value="${basedir}/src/main/javacc"
   */
  private File sourceDirectory;

  /**
   * The directory where the parser files generated by JavaCC will be stored.<br>
   * The directory will be registered as a compile source root of the project such that the
   * generated files will participate in later build phases like compiling and packaging.<br>
   * Default value is <code>${project.build.directory}/generated-sources/javacc</code>. A JavaCC
   * option.
   *
   * @parameter property="outputDirectory"
   *     default-value="${project.build.directory}/generated-sources/javacc"
   */
  private File outputDirectory;

  /**
   * The granularity in milliseconds of the last modification date for testing whether a source
   * needs recompilation.<br>
   * Default value is <code>0</code>. A plugin parameter.
   *
   * @parameter property="lastModGranularityMs" default-value="0"
   */
  private int staleMillis;

  /**
   * A set of Ant-like inclusion patterns used to select files from the source directory for
   * processing.<br>
   * By default, the patterns <code>**&#47;*.jj</code> and <code>**&#47;*.JJ</code> are used to
   * select grammar files. A plugin parameter.
   *
   * @parameter
   */
  private String[] includes;

  /**
   * A set of Ant-like exclusion patterns used to prevent certain files from being processed.<br>
   * By default, this set is empty such that no files are excluded. A plugin parameter.
   *
   * @parameter
   */
  private String[] excludes;

  /** {@inheritDoc} */
  @Override
  protected File getSourceDirectory() {
    return sourceDirectory;
  }

  /** {@inheritDoc} */
  @Override
  protected String[] getIncludes() {
    if (includes != null) {
      return includes;
    } else {
      return new String[] {"**/*.jj", "**/*.JJ"};
    }
  }

  /** {@inheritDoc} */
  @Override
  protected String[] getExcludes() {
    return excludes;
  }

  /** {@inheritDoc} */
  @Override
  protected File getOutputDirectory() {
    return outputDirectory;
  }

  /** {@inheritDoc} */
  @Override
  protected int getStaleMillis() {
    return staleMillis;
  }

  /** {@inheritDoc} */
  @Override
  protected File[] getCompileSourceRoots() {
    return new File[] {getOutputDirectory()};
  }

  /** {@inheritDoc} */
  @Override
  protected String getParserPackage() {
    return packageName;
  }

  /** {@inheritDoc} */
  @Override
  protected void processGrammar(final GrammarInfo grammarInfo)
      throws MojoExecutionException, MojoFailureException {
    final File jjFile = grammarInfo.getGrammarFile();
    final File jjDirectory = jjFile.getParentFile();

    final File tempDirectory = getTempDirectory();

    // setup output directory of parser file (*.java) generated by JavaCC
    final File parserDirectory = new File(tempDirectory, "parser");

    // generate parser files
    final JavaCC javacc = newJavaCC();
    javacc.setInputFile(jjFile);
    javacc.setOutputDirectory(parserDirectory);
    javacc.run();

    // copy parser files from JavaCC
    copyGrammarOutput(
        getOutputDirectory(),
        grammarInfo.getParserPackage(),
        parserDirectory,
        grammarInfo.getParserName() + "*");

    // copy source files which are next to grammar unless the grammar reside
    // s in an ordinary source root (legacy support for custom sources)
    if (!isSourceRoot(grammarInfo.getSourceDirectory())) {
      copyGrammarOutput(getOutputDirectory(), grammarInfo.getParserPackage(), jjDirectory, "*");
    }

    deleteTempDirectory(tempDirectory);
  }

  /** {@inheritDoc} */
  @Override
  protected long computeLastTS() {
    long lastTS = 0L;
    // core
    lastTS = updateTS("META-INF/maven/org.javacc/core", lastTS);
    // generator
    final String codeGenerator = getCodeGenerator();
    String dir = codeGenerator.toLowerCase();
    if (codeGenerator.equals("C++")) {
      dir = "cpp";
    } else if (codeGenerator.equals("C#")) {
      dir = "csharp";
    }
    lastTS = updateTS("META-INF/maven/org.javacc.generator/" + dir, lastTS);
    // custom template(s)
    lastTS = updateTS("templates/" + dir, lastTS);
    return lastTS;
  }
}
